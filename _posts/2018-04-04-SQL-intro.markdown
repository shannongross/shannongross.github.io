---
published: true

layout: post
title: "Introduction to Database Management Systems"
date: 2018-04-04
description: Introduction to SQL
img: db.jpg  
fig-caption: database management Systems
tags: [SQL, programming, database, big data]
---

With the advent of [Big Data](/big-data/), more and more systems are increasingly using databases to manage the high volume, variety and velocity of information. Most databases are programmed using the SQL (generally pronounced "sequel") language, which describes a series of data tables and relations between them.

A **database management system (DBMS)** is a collection of programs that enables users to create and maintain a database. The database and software together form a database system. Popular DBMS's include:
- MySQL (very popular and widely used)
- Oracle (often used by large corporations, high cost)
- Microsoft access (graphical and beginner-friendly)
- PostgreSQL (open source)
- NoSQL (used to store huge amounts of data in a non-relational way)


## When to use (or not use) a DBMS:
What advantages does having an DBMS offer?
* Insulation between programs and data, and data abstraction
* Support of multiple views of the data
* Sharing of data and multiuser transaction processing
* Controls redundancy / duplication of effort
* Multiple user interfaces
* Meta-data describes the structure of the primary database

When should you NOT use a DBMS?
* When you have a simple, well-defined database application that isn’t expected to change at all
* When you don’t need multiple-user access to data
* When the initial investment in hardware, software and training are too high


# How do you define a database schema in SQL?
In SQL, the database structure or **schema** is defined using Data Definition Language or **DDL**. DDL statements describe how data should reside in the database.

* `CREATE` – to create database and its objects (e.g. table, index, views, store procedure, function and triggers)
* `ALTER` – alters the structure of the existing database
* `DROP` – delete objects from the database

As an example, a DDL statement to create a new SQL table may look like:

{% highlight ruby %}
### Example - creating a table
CREATE TABLE table_name (
	field_name data_type constraint_name,
	field_name data_type constraint_name);
{% endhighlight %}


# What are DML (queries)?
Once you have created a database schema and added data to it, Data Manipulation Language or **DML** can be used to manipulate the information and try to gather meaningful insight. DML is used to store, modify, retrieve, delete and update data in database through statements such SELECT, INSERT, UPDATE, and DELETE, among others.
* `SELECT` – retrieve data from the a database
* `INSERT` – insert data into a table
* `UPDATE` – updates existing data within a table
* `DELETE` – Delete all records from a database table

As an example, a DML statement to retrieve information from a particular SQL table may look like:

{% highlight ruby %}
### Example - basic selection query
SELECT * FROM Employee WHERE Salary > 30000;
{% endhighlight %}

Notably, one should remember to use UPDATE to update *existing*  rows versus INSERT for adding *new* rows.


# More Complex Operations & Join Types
Database management systems frequently involve more than one table, therefore more complex operations like **joins** are necessary. There are different possible types of joins for combining columns across related tables.

### 1. Cross Join (aka Cartesian Product)
Combine every row in table1 with every row in table2 (result is a very large table).
{% highlight ruby %}
SELECT * FROM Employee, Department WHERE Depname = Dname;
{% endhighlight %}
* Note: Disadvantage to this is - what happens when the department name changes?
* Solution: reference should be a key for a Dnumber is Unique and Not Null

### 2. Natural Join
Applies when you have the same column names in both tables, can be redundant.
* **NULL values in a Join**. Foreign key can have nulls. If you use a foreign key to join and one of the entries is null, then that row will be dropped from the query result.

### 3. Outer Join
Preserves rows (inserts NULLs in the missing fields instead of dropping the whole row)
* **Query using LIKE**
{% highlight ruby %}
SELECT Mgr_ssn
FROM DEPARTMENT NATURAL JOIN DEPT_LOCATIONS
WHERE Dlocation LIKE ‘%d’;
{% endhighlight %}

## Other
### Remove duplicates
{% highlight ruby %}
SELECT DISTINCT Salary FROM Employee;
{% endhighlight %}

### Aliasing
{% highlight ruby %}
SELECT Fname, 1.1*Salary as NewSalary
FROM Employee WHERE  Salary > 30000;
{% endhighlight %}

### Sorting
{% highlight ruby %}
SELECT * FROM Employee ORDER BY Lname ASC, Salary DESC;
{% endhighlight %}

## Relational versus Object Oriented Databases
The way that a database management system accesses and processes its information can be grouped into two distinct categories. On the one had, you have **relational databases** which are systems that rely on key-value pairs to connect and transfer information. Alternatively there are **object-oriented databases (OODBs)**, where data is stored in the form of an *object* consisting of (1) the data and (2) the instruction for software.

OODBs initially seemed like they would be a major competitor to relational databases, since they were more general and used popular object-oriented principles. However, the complexity of the OO model and the lack of an early standard meant that they weren’t as widely adopted as initially anticipated. Examples of current OODBs include MongoDB and Neo4j.

## What is different about NoSQL (Not Only SQL) databases?

SQL |	NoSQL
---|---
Relational Databases (RDBMS)	| non-relational or distributed database
---|---
table based databases |	document based, key-value pairs, graph databases or wide-column stores
---|---
predefined schema | dynamic schema for unstructured data
---|---
MySql, Oracle, Sqlite, Postgres	| MongoDB, Neo4j
---|---
Better for complex queries |	Better for big data
---|---

<br>

(Note: page under development)

<br>

# Reference
<!-- * Database Systems (Elmasri and Navathe) -->
